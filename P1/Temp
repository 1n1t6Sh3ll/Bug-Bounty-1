p1 - Building ASP.NET Core MVC Application.
-Install .Net Core Sdk
-Building ASP.NET Core MVC Application.
-open command prompt and perform following operations Command: to create mvc project dotnet new mvc --
auth none
-Go to controllers folder and modify HomeController.cs file to match following:
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using MVC.Models;
namespace MVC.Controllers
{
 public class HomeController : Controller
 { public async Task <IActionResult> Index()
 {
 var model= new StockQuote{ Symbol="HELLO", Price=3200};
 return View(model);
 }
 }
} 
-Run the project cmd: dotnet run
-Now open browser and and type URL: localhost:5135
-Now go back to command prompt and stop running project using CTRL+C
- Go to models folder and add new file StockQuote.cs to it with following content
using System;
namespace MVC.Models
{
 public class StockQuote
 { public string Symbol {get;set;}
 public int Price{get;set;}
 }
} 
-Now Add View to folder then home folder in it and modify index.cshtml file to match following
(\MVC\Views\Home)
@{
 ViewData["Title"] = "Home Page";
}
<div>
 Symbol: @Model.Symbol <br/>
 Price: $@Model.Price <br/>
</div>
-Now modify HomeController.cs file to match following:
(alredy modify)
-Now run the project using
-Now go back to browser and refresh to get modified view response

p2 - Building ASP. NET Core REST API
-Download and install dotnet
-Check everything installed correctly cmd: dotnet
Create your web API
-Open two command prompts Command prompt 1: Command: dotnet new webapi -o Glossary
-Command Prompt 2: (try running ready made weatherforecast class for testing) Command: curl --insecure
https://localhost:5001/weatherforecast
-Now Change the content: To get started, remove the WeatherForecast.cs file from the root of the project and the
WeatherForecastController.cs file from the Controllers folder. Add Following two files
-D:\Glossary\GlossaryItem.cs (type it in notepad and save as all files)
-D:\Glossary\Controllers\ GlossaryController.cs (type it in notepad and save as all files)
-Now stop running previous dotnet run on command prompt 1 using Ctrl+C. and Run it again for new code. On
Command prompt1: dotnet run
-On Command prompt2:
1. Getting a list of items: Command: curl --insecure http://localhost:5176/api/glossary
2. Getting a single item Command: curl --insecure ttp://localhost:5176/api/glossary/MVC
3. Creating an item Command: curl --insecure -X POST -d "{\"term\": \"MFA\", "definition\":\"An uthentication
process.\"}" -H "ContentType:application/json" http://localhost:5176/api/glossary
4. Update Item Command:
curl --insecure -X PUT -d "{\"term\": \"MVC\", \"definition\":\"Modified record of Model View Controller.\"}" -H
"Content-Type:application/json" http://localhost:5176/api/glossary
5. Delete Item:
curl --insecure --request DELETE --url http://localhost:5176/api/glossary/openid

p3- Working with docker, docker commands, docker images & Containers.
-Create Docker Hub Account from https://hub.docker.com
-Navigate to Play with Docker from https://labs.play-with-docker.com/
- Click on create Instance and enter the following command
$ docker -v
$ docker –version
B) Build your own image file from docker file & push & pull & run the file.
-Create Docker file
$ docker login --username=whatever
$ docker images
$ cat > dockerfile <<EOF
> FROM busybox
> CMD echo "Hello"
> EOF
-Enter command to build the ‘dockerfile’ created in step 1: $ docker build .\
- List all the images from the docker: $ docker images
- docker run -p 80:80 imageid
- Push the image to docker.
- Navigate to Docker repository and check the Image in Tags section.

p4 - Installing Software packages on docker.
-Go to CLI Option on the container in Docker Desktop
-Now, you have opened the bash of your Ubuntu Docker Container. To Install any packages, you first need to
update the OS.
$ apt-get -y update
-After you have updated the Docker Container, You can now install the Firefox and VM Packages inside it.
$ apt-get -y install firefox
$ apt-get -y install vim
-Run vim to verify if the software package has been installed.

p5 - Working with Docker Volumes and Networks.
Pre-Requisites:
1. Open Windows Firewall
2. Click on Advanced Security
3. Click on Inbound Rules
4. Create a New Rule
a) Which type of rule would you like to create → port
b) Does this rule apply the local ports or specific local ports
c) Select Specific local ports - 80
d) What action should be taken when a connection matches the specified conditions? - Allow the
connection
e) When does this apply? – Domain, Private, Public
f) Name: ReportServer
g) Description: ReportServer
-a) docker pull nginx – nginx : nginx is the image which is already available in docker
b) docker run -it –name=webApp -d -p 80:80 nginx: Create a webapp and run it with nginx image on port 80
-Click on Port and enter 80 in the dropdown window and click OK
docker exec -it WebApp bash
Cd /usr/share/nginx/html
Echo “Hello Welcome to updated nginx Page.”> index.html
exit
-List all the running containers: docker ps
Create another container in Docker: WebApp1
-Docker run -it –name=WebApp1 -d -p 80:80 nginx:
Click on port and enter 80 in the dropdown and click ok
Output: the welcome page of nginx should be visible
Problem: Updates made in one container is not reflected into another container.
Solution: - Volume
Update made in one container within the volume will be reflected in all the containers of that volume.
Step 7: Creation of Volume(MyVolume) Command:
a. docker volume create MyVolume
b. docker volume ls
c. docker volume inspect MyVolume
d. docker stop WebApp1
Step 8: Create a container (WebApp2) inside the container MyVolume
docker run -d –name = WebApp2 –mount source=MyVolume,destination=/usr/share/nginx/html –p 80:80 nginx
Step 9: Enter the below commands:
a) ls /
b) cd /var/lib/docker
c) ls
d) cd volumes
e) ls
f) cd MyVolume
g) ls
h) cd _data
Step 10: Edit the index file with the below content to “Display the content on the Webpage”
Step 11: Stop the above container (WebApp2) and Create another container within the volume (MyVolume)
Open port 80
Output: The edits made in one container of the volume will be reflected in all the containers of that volume

p6 - Working with Circle CI for continuous integration.
Step 1 - Create a repository
1. Log in to GitHub and begin the process to create a new repository.
2. Enter a name for your repository (for example, hello-world).
3. Select the option to initialize the repository with a README file.
4. Finally, click Create repository.
5. There is no need to add any source code for now
6. Login to Circle CI https://app.circleci.com/ Using GitHub Login, Once logged in navigate to Projects.

p7 - Creating Backing service with ASP.NET 2.0 core.
-Now login in to Play-With-Docker
Start typing following commands
-Command:
docker run -d -p 5000:5000 -e PORT=5000 \
> -e LOCATION URL=http://localhost:5001 \
> dotnetcoreservices/teamservice:location
output: (you can observe that it has started port 5000 on top)
-Command: to run location service
docker run -d -p 5001:5001 -e PORT=5001 \
> dotnetcoreservices/locationservice:nodb
output: (now it has started one more port that is 5001 for location service)
-Command: to check running images in docker $docker images
-Command: to create new team
curl -H "Content-Type:application/json" -X POST -d \
> '{"id":"e52baa63-d511- 417e-9e54-7aab04286281",
"name":"KC"}' http://localhost:5000/teams
-output:Command: To confirm that team is added
curl http://localhost:5000/teams/e52baa63-d511-417e-9e54-7aab04286281
-Command: to add new member to team
curl -H "Content-Type:application/json" -X POST -d \
> '{"id":"63e7acf8-8fae- 42ce-9349-3c8593ac8292",
"firstName":"Kirti", "lastName":"Bhatt"}' http://localhost:5000/teams/e52baa63-d511-417e-9e54-
7aab04286281/members
-Command: To confirm member added
curl http://localhost:5000/teams/e52baa63-d511-417e-9e54-7aab04286281
-Command: To add location for member
curl -H "Content-Type:application/json" -X POST -d \'{"id":"64c3e69f-1580- 4b2f-a9ff-2c5f3b8f0e1f",
"latitude":12.0,"longitude":12.0,"altitude":10.0, "timestamp":0,"memberId":"63e7acf8-8fae-42ce-9349-3c8593ac8292"}'
http://localhost:5001/locations/63e7acf8-8fae-42ce-9349-3c8593ac8292
-Command: To confirm location is added in member
curl http://localhost:5001/locations/63e7acf8-8fae-42ce-9349-3c8593ac8292

p8 -  Working with Kubernetes.
Step 1: Add a new Instance
Step 2: Create master node and create a Cluster Using the following commands
Master: kubeadm init --apiserver-advertise-address $(hostname -i) --pod-network-cidr 10.5.0.0/16
Cluster: kubectl apply -f https://raw.githubusercontent.com/cloudnativelabs/kube-
router/master/daemonset/kubeadm-kuberouter.yam
You Can Create worker node using the following command given by master node in another.
The Below Command Can be used to create Containers in the pods in master node/Control plane
kubectl create deployment my-dep --image=nginx --replicas=3
Basic Commands
View the nodes available - kubectl get nodes
View the pods available - kubectl get pods
View the Services available - kubectl get services
Check the version - docker -v
